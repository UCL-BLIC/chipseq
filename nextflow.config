/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  NGI-ChIPseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */


// Global default params, used in configs
params {
  version = '1.4dev' //Pipeline version
  nf_required_version = '0.27.6' //Minimum version of Nextflow required
  container = 'nfcore/chipseq:latest' // Container slug. Stable releases should specify release tag!

  reads = "data/*{1,2}*.fastq.gz"
  macsconfig = "data/macsconfig"
  multiqc_config = "$baseDir/conf/multiqc_config.yaml"
  extendReadsLen = 100
  notrim = false
  allow_multi_align = false
  saveReference = false
  saveTrimmed = false
  saveAlignedIntermediates = false
  saturation = false
  broad = false
  blacklist_filtering = false
  outdir = './results'
  igenomes_base = "./iGenomes"
  email = false
  plaintext_email = false
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  uppmax {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uppmax.config'
    includeConfig 'conf/igenomes.config'
  }
  uppmax_modules {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uppmax.config'
    includeConfig 'conf/uppmax-modules.config'
    includeConfig 'conf/igenomes.config'
  }
  uppmax_devel {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uppmax.config'
    includeConfig 'conf/uppmax-devel.config'
    includeConfig 'conf/igenomes.config'
  }
  docker {
    includeConfig 'conf/docker.config'
  }
  testing {
    includeConfig 'conf/testing.config'
  }
  aws {
    includeConfig 'conf/base.config'
    includeConfig 'conf/aws.config'
    includeConfig 'conf/igenomes.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/nfcore-ChIPseq_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/nfcore-ChIPseq_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/nfcore-ChIPseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/nfcore-ChIPseq_DAG.svg"
}

manifest {
  homePage = 'https://github.com/nf-core/ChIPseq'
  description = 'Analysis pipeline used for ChIP-seq (chromatin immunoprecipitation sequencing) data'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    if(obj.compareTo(params.max_memory) == 1)
      return params.max_memory
    else
      return obj
  } else if(type == 'time'){
    if(obj.compareTo(params.max_time) == 1)
      return params.max_time
    else
      return obj
  } else if(type == 'cpus'){
    return Math.min( obj, params.max_cpus )
  }
}
